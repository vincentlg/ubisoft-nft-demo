/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../common'

export interface IRewardsSplitterInterface extends utils.Interface {
  functions: {
    'onERC20Received(uint256,address,uint256)': FunctionFragment
  }

  getFunction(nameOrSignatureOrTopic: 'onERC20Received'): FunctionFragment

  encodeFunctionData(
    functionFragment: 'onERC20Received',
    values: [BigNumberish, string, BigNumberish],
  ): string

  decodeFunctionResult(
    functionFragment: 'onERC20Received',
    data: BytesLike,
  ): Result

  events: {
    'RewardsDistributed(uint256,address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'RewardsDistributed'): EventFragment
}

export interface RewardsDistributedEventObject {
  tokenId: BigNumber
  recipient: string
  token: string
  amount: BigNumber
}
export type RewardsDistributedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  RewardsDistributedEventObject
>

export type RewardsDistributedEventFilter =
  TypedEventFilter<RewardsDistributedEvent>

export interface IRewardsSplitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IRewardsSplitterInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    onERC20Received(
      tokenId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  onERC20Received(
    tokenId: BigNumberish,
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    onERC20Received(
      tokenId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>
  }

  filters: {
    'RewardsDistributed(uint256,address,address,uint256)'(
      tokenId?: BigNumberish | null,
      recipient?: string | null,
      token?: string | null,
      amount?: null,
    ): RewardsDistributedEventFilter
    RewardsDistributed(
      tokenId?: BigNumberish | null,
      recipient?: string | null,
      token?: string | null,
      amount?: null,
    ): RewardsDistributedEventFilter
  }

  estimateGas: {
    onERC20Received(
      tokenId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    onERC20Received(
      tokenId: BigNumberish,
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
